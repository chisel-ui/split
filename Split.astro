---
import { Sizes, sizes, uid } from '@chisel-ui/core'
import Stack, { StackProps } from '@chisel-ui/stack/Stack.astro'

export type Fraction =
	| 'auto-start'
	| 'auto-end'
	| '1/4'
	| '1/3'
	| '1/2'
	| '2/3'
	| '3/4'

export interface SplitProps extends StackProps {
	fraction?: Fraction
	switchAt?: number | string | keyof Sizes
}

const fractions = {
	'1/4': '1fr 3fr',
	'1/3': '1fr 2fr',
	'1/2': '1fr 1fr',
	'2/3': '2fr 1fr',
	'3/4': '3fr 1fr',
	'auto-start': 'auto 1fr',
	'auto-end': '1fr auto',
}

function getBreakpoint(switchAt?: number | string | keyof Sizes) {
	if (!switchAt) {
		return undefined
	}

	if (switchAt in sizes) {
		return sizes[switchAt]
	}

	if (typeof switchAt === 'number') {
		return `${switchAt}px`
	}

	return switchAt
}

const {
	theme = {},
	fraction = '1/2',
	switchAt,
	...props
} = Astro.props as SplitProps
const id = uid()

const maybeFraction = fractions[fraction] || fractions['1/2']
const maybeBreakpoint = getBreakpoint(switchAt)

const inlineStyle =
	maybeBreakpoint &&
	`
    @media (min-width: ${maybeBreakpoint}) {
        #${id} {
            --columns: ${maybeFraction};
        }
    }
`
---

<Stack data-chisel-split {id} {theme} {...props}>
	<slot />
</Stack>

<style set:html={inlineStyle}>

</style><style global>
	[data-chisel-split] {
		box-sizing: border-box;
		display: grid;
		gap: var(--gutter, 0px);
		grid-template-columns: var(--columns, 1fr);
	}

	[data-chisel-split] > * {
		margin: 0;
	}
</style>
